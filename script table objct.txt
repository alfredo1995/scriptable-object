Scriptable Object Unity C#

Um ScriptableObject é um contêiner de dados usado para salvar grandes quantidades de dados.
Um dos principais casos de uso do ScriptableObjects é reduzir o uso de memória do seu projeto evitando cópias de valores. 
Isso é útil se o seu projeto tiver um Prefab que armazena dados inalteráveis.



1°) Create script > ScriptableObject
	
	* criar a pasta ScriptableObject > criar o script TestScriptableObject 

	* estender a class ScriptableObject para dizer que agora são contenie de dados
	* definir alguns campos para ter um objecto programavel

public class TestScriptableObject : ScriptableObject
{
	public string myString;
}


	* criar uma instacia do objeto programavel
	* adicionar o atributo de menu de criação de ativos, 2 parametros (nome do arquivo, nome do menu e 
	* nome do menu, criado a pasta dos objestos programaveis


[CreateAssetMenu(fileName = "TestScriptableObject ", menuName = "ScriptableObject/TestScriptableObject")]

public class ScriptableObject : ScriptableObject { public string myString; }


2°) Editor da unity

	create > ScriptableObject  > TestScriptableObject 

3°) Usar o script table object , criando script Testing

	* criar um gameobject empty > anexar o script Testing

	* adiconar um campo para o tipo do nosso objeto 
	* acessar a string criada e de um nome a ela

public class Testing : MonoBehaviour
{
	[SerializeField] private TestScriptableObject testScriptableObject;

	private void start () 
	{
		Debug.Log(testScriptableObject.myString);
	}
}



4°) fazer os teste 

	* temos um campo do tipo test scriptable object para arrastar o obj programavel	
	* testa duplicando o script table objet teste, nomeando e definindo uma nova string a ser salva mySting

	* sempre que for usar o arquivo, faça a referencia no gameobjeto contendo o script testScriptableObject

	* temos a mensagem diferente, temos 2 script diferente objetos, cada um com sua propria instancia de dados


5°) Uso mais basicos dos objetos 



[createAssetMenu(fileName = "TestScriptableObject ", menuName = "ScriptableObject/TestScriptableObject")]


public class TestScriptableObject : ScriptableObject
{
	public string mySting;
	public int myInt;
	public Sprite[] spriteArray;  //usado em sistema de grade "grid system"
}


	* temos os nossos campos para serem configurados para criar quantas instacia de dados quisemos 







------------------------------------------------  agora implementar o script table object em um projeto ja existente  ------------------------------------------------------------------------------


Implementação de um sistema de pooling de objetos no Unity usando C#

O Pool de Objetos é um padrão de design de criação que pré-instancia todos os objetos que você precisará em qualquer momento específico antes do jogo. 
Isso elimina a necessidade de criar novos objetos ou destruir os antigos enquanto o jogo está em execução.


A coleta de lixo é uma técnica de gerenciamento automático de memória usada em linguagens de programação para recuperar a memória ocupada por objetos que não estão mais em uso pelo programa. O purColocar a coleta de lixo é liberar os desenvolvedores do gerenciamento manual de memória, reduzindo o risco de vazamentos de memória e ponteiros pendurados.



    [Header("Define qual o objeto que irá compor o pool")]
    [SerializeField] private GameObject prefab;

Header é um atributo utilizado para adicionar um cabeçalho personalizado na interface do Inspector para fornecer uma melhor organização e legibilidade das propriedades do script.
Declaro uma variável privada chamada prefab do tipo GameObject que será usado para definir qual objeto será utilizado para formar o pool.


    [Header("Define a quantidade de objetos que serão criados")]
    [SerializeField] private int amountToPool;

Declaro uma variável privada chamada amountToPool do tipo int que define a quantidade de objetos que serão criados no pool



    private List<GameObject> pooledObjects = new();

Declaro uma lista chamada pooledObjects do tipo List<GameObject>. Essa lista será usada para armazenar os objetos que foram criados e desativados para reutilização.


    private void Start()
    {
        for (int index = 0; index < amountToPool; index++)
        {
            GameObject obj = Instantiate(prefab);
            obj.SetActive(false);
            pooledObjects.Add(obj);
        }
    }

Nesse método Start, o loop for é usado para criar a quantidade definida de objetos no pool.
A variável index é usada para controlar o número de objetos criados.
Dentro do loop, um objeto é instanciado usando o Instantiate() e armazenado na variável obj.
Em seguida, o objeto é desativado usando SetActive(false) e adicionado à lista pooledObjects para ser reutilizado.


    public GameObject GetPooledObject()
    {
        for (int index = 0; index < pooledObjects.Count; index++)
        {
            if (!pooledObjects[index].activeInHierarchy)
            {
                return pooledObjects[index];
            }
        }
        return null;
    }

O método GetPooledObject() é usado para obter um objeto do pool.
A variável index é usada para controlar o número de objetos obtidos.
Dentro do loop for percorre a lista de pooledObjects e verifico se algum objeto não está ativo na hierarquia.
Se encontrar um objeto disponível, ele retorna esse objeto. Caso contrário, retorna null.




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SpaceShip.cs


    private ObjectPooling shotsPooling;

Declaro uma variável shotsPooling como referência para o componente ObjectPooling, que será usado para obter os objetos de tiro do pool. 


    private void Start()
    {
        shotsPooling = GetComponent<ObjectPooling>();
    }


O método Start() referência o componente ObjectPooling que é obtida através do método GetComponent<ObjectPooling>().


    private void ShotFire()
    {
        canShotAgain = false;
        GameObject shot = shotsPooling.GetPooledObject();
        if (shot is null)
        {
            Debug.LogWarning("Sem tiros disponíveis");
            return;
        }
        shot.transform.position = shotPoint.position;
        shot.SetActive(true);
    }

O método ShotFire() é responsável por realizar o tiro. 
Em seguida, chamo o método GetPooledObject() do componente referenciando o ObjectPooling para obter um objeto de tiro do pool. 
Se não houver objetos disponíveis, ativa o objeto de tiro recuperado do pool, tornando-o visível e interagível no jogo.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Projectile.cs


    private void OnTriggerEnter(Collider other)
    {
        Debug.Log("Bateu");
        this.gameObject.SetActive(false);
        Destroy(other.gameObject);
    }

O método  é chamado quando ocorre uma colisão do projétil com outro objeto que possui um colisor.  
Em seguida, o objeto do projétil é desativado usando  para que ele não seja mais visível ou interaja com outros objetos. 
Além disso, o objeto que colidiu com o projétil () é destruído usando .OnTriggerEnter(Collider other)SetActive(false)other.gameObjectDestroy()